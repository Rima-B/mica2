package obiba.mica;
option java_package = "org.obiba.mica.web.model";
import "Mica.proto";


message JoinQueryDto {
  optional QueryDto variableQueryDto = 1;
  optional QueryDto datasetQueryDto = 2;
  optional QueryDto studyQueryDto = 3;
  optional QueryDto networkQueryDto = 4;
}

message QueryDto {
  required int32 from = 1 [default = 0];
  required int32 size = 2 [default = 10];
  optional FilteredQueryDto filteredQuery = 3;
  repeated string aggsBy = 4; // sub aggregations for the listed fields
}

message FilteredQueryDto {
  required BoolFilterQueryDto filter = 1;
}

message BoolFilterQueryDto {
  repeated FilterQueryDto must = 1;
  repeated FilterQueryDto must_not = 2;
  repeated FilterQueryDto should = 3;
  optional ParentChildFilterDto parentChildFilter = 4;
}

message ParentChildFilterDto {
  enum Relationship {
    PARENT = 0;
    CHILD = 1;
  }

  required Relationship relationship = 1;
  required string type = 2;
  required FilteredQueryDto filteredQuery = 3;
}

  message FilterQueryDto {
  required string field = 1;
  extensions 1000 to max;
}

message TermsFilterQueryDto {
  repeated string values = 2;

  extend FilterQueryDto {
    optional TermsFilterQueryDto terms = 1000;
  }
}

message RangeConditionDto {
  enum Operator {
    LT = 0;
    LTE = 1;
    GT = 2;
    GTE = 3;
  }

  required Operator op = 1;
  required string value = 2;
}

message RangeFilterQueryDto {

  optional RangeConditionDto from = 1;
  optional RangeConditionDto to = 2;

  extend FilterQueryDto {
    optional RangeFilterQueryDto range = 1001;
  }
}

message JoinQueryResultDto {
  optional QueryResultDto variableResultDto = 1;
  optional QueryResultDto datasetResultDto = 2;
  optional QueryResultDto studyResultDto = 3;
  optional QueryResultDto networkResultDto = 4;
}

message QueryResultDto {
  repeated AggregationResultDto aggs = 1;
  required int32 totalHits = 2;
  required int64 totalCount = 3;

  extensions 1000 to max;
}


message DatasetVariableResultDto {
  repeated obiba.mica.DatasetVariableResolverDto summaries = 1;
  repeated obiba.mica.DatasetVariableDto variables = 2;
  repeated obiba.mica.DatasetDto datasets = 3;

  extend QueryResultDto {
    optional DatasetVariableResultDto result = 1000;
  }
}

message DatasetResultDto {
  repeated obiba.mica.DatasetDto datasets = 1;
  repeated obiba.mica.DocumentDigestDto digests = 2;

  extend QueryResultDto {
    optional DatasetResultDto result = 1001;
  }
}

message StudyResultDto {
  repeated obiba.mica.StudySummaryDto summaries = 1;
  repeated obiba.mica.StudyDto studies = 2;
  repeated obiba.mica.DocumentDigestDto digests = 3;

  extend QueryResultDto {
    optional StudyResultDto result = 1002;
  }
}

message CountStatsDto {
  optional int32 variables = 1;
  optional int32 studyDatasets = 2;
  optional int32 harmonizationDatasets = 3;
  optional int32 studies = 4;
  optional int32 networks = 5;

  extend StudySummaryDto {
    optional CountStatsDto studyCountStats = 1001;
  }

  extend DatasetDto {
    optional CountStatsDto datasetCountStats = 1003;
  }

  extend NetworkDto {
    optional CountStatsDto networkCountStats = 1001;
  }
}

message NetworkResultDto {
  repeated obiba.mica.NetworkDto networks = 1;
  repeated obiba.mica.DocumentDigestDto digests = 2;

  extend QueryResultDto {
    optional NetworkResultDto result = 1003;
  }
}

message StudySummariesResultDto {
  repeated obiba.mica.StudySummaryDto summaries = 1;

  extend QueryResultDto {
    optional StudySummariesResultDto
     result = 1009;
  }
}

message AggregationResultDto {
  required string aggregation = 1;
  extensions 1000 to max;
}

message TermsAggregationResultDto {
  required string key = 1;
  required int32 count = 2;
  repeated AggregationResultDto aggs = 3;

  extend AggregationResultDto {
    repeated TermsAggregationResultDto terms = 1000;
  }
}

message StatsAggregationResultDto {
  required int64 count = 1;
  required double min = 2;
  required double max = 3;
  required double avg = 4;
  required double sum = 5;

  extend AggregationResultDto {
    optional StatsAggregationResultDto stats = 1001;
  }
}

message TermCoverageDto {
  required obiba.mica.TaxonomyEntityDto term = 1;
  required int32 hits = 2;
}

message VocabularyCoverageDto {
  required obiba.mica.TaxonomyEntityDto vocabulary = 1;
  required int32 hits = 2;
  optional int32 count = 3; // sum of the hits of vocabulary allows multiple terms
  repeated TermCoverageDto terms = 4;
}

message TaxonomyCoverageDto {
  required obiba.mica.TaxonomyEntityDto taxonomy = 1;
  required int32 hits = 2;
  repeated VocabularyCoverageDto vocabularies = 3;
}

message TaxonomiesCoverageDto {
  repeated TaxonomyCoverageDto taxonomies = 1;
  required int32 totalHits = 2;
  required int64 totalCount = 3;
}


